//================================================================================
//
//    テストシェーダーファイル
//    Author : Araki Kai                                作成日 : 2018/01/10
//
//================================================================================



//**********************************************************************
//
// グローバル変数
//
//**********************************************************************

// ローカルから射影空間に変換行列( ワールド×ビュー×プロジェクション )
float4x4 matrix_WVP_;

// テクスチャ
texture texture_;

// サンプラ( テクスチャを読み込むときの設定、使用するテクスチャやサンプラステートの設定をする)
sampler sampler_ = sampler_state{Texture = <texture_>;
							     MinFilter = LINEAR;
							     MagFilter = LINEAR;
							     MipFilter = NONE;
								  
							     AddressU = Clamp;
							     AddressV = Clamp;};



//**********************************************************************
//
// 構造体宣言
//
//**********************************************************************

// 頂点シェーダへの入力
struct VS_INPUT
{
	float4 position_   : POSITION;		// 位置レジスタ
	float2 texcoord_0_ : TEXCOORD0;		// テクスチャ座標レジスタ
};


// 頂点シェーダからの出力( ピクセルシェーダの入力 )
struct VS_OUTPUT
{
	float4 position_   : POSITION;		// 位置レジスタ
	float2 texcoord_0_ : TEXCOORD0;		// テクスチャ座標レジスタ
};



//**********************************************************************
//
// 頂点シェーダ定義
//
//**********************************************************************

//================================================================================
//
// [ 頂点シェーダ関数( 0 ) ]
//
//================================================================================

VS_OUTPUT VS(VS_INPUT input)
{
	// 出力データの作成
	VS_OUTPUT output = (VS_OUTPUT)0;

	// 位置情報の代入
	// mul() : ベクトルと行列の乗算
	output.position_ = mul(input.position_, matrix_WVP_);

	// テクスチャ座標
	output.texcoord_0_ = input.texcoord_0_;

	return output;
}



//**********************************************************************
//
// ピクセルシェーダ定義
//
//**********************************************************************

//================================================================================
//
// [ ピクセルシェーダ関数 ]
//
//================================================================================

float4 PS(VS_OUTPUT input) : COLOR
{
	// tex2Dはテクスチャの読み込み
	// sampler_に登録されているテクスチャを、テクスチャ座標input.texcoord_0_で読み込んでいる
	return tex2D(sampler_, input.texcoord_0_);
}



//**********************************************************************
//
// テクニック定義
//
//**********************************************************************

//================================================================================
//
// [ テクニック(レンダリング方法をまとめたもの) ]
//
//================================================================================

technique Techique01
{
	pass P0
	{
		VertexShader = compile vs_2_0 VS();
		PixelShader  = compile ps_2_0 PS();
	}
}