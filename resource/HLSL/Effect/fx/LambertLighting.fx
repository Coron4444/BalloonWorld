//================================================================================
//
//    ランバート照明モデルシェーダー
//    Author : Araki Kai                                作成日 : 2018/07/11
//
//================================================================================



//**********************************************************************
//
// グローバル変数
//
//**********************************************************************

// 変換行列
float4x4 MATRIX_WVP;
float4x4 MATRIX_WIT;

// ディフューズライトベクトル
float3 DIFFUSE_LIGHT_VECTOR;

// 光の強度
float4 DIFFUSE_LIGHT_INTENSITY = {1.0f, 1.0f, 1.0f, 0.0f};
float4 AMBIENT_LIGHT_INTENSITY = {0.1f, 0.1f, 0.1f, 0.0f};

// オブジェクトの色(反射係数)
float4 OBJECT_COLOR_DIFFUSE = {1.0f, 1.0f, 1.0f, 1.0f};
float4 OBJECT_COLOR_AMBIENT = {1.0f, 1.0f, 1.0f, 1.0f};



//**********************************************************************
//
// 構造体宣言
//
//**********************************************************************

// 頂点シェーダへの入力
struct Input_VS
{
	float4 position_ : POSITION;
	float3 normal_   : NORMAL;
};


// 頂点シェーダからの出力(ピクセルシェーダの入力)
struct Output_VS
{
	float4 position_ : POSITION;
	float4 color_	 : COLOR0;
};



//**********************************************************************
//
// 頂点シェーダ定義
//
//**********************************************************************

//================================================================================
//
// [ メイン頂点シェーダ関数 ]
//
//================================================================================

Output_VS mainVS(Input_VS input)
{
	// 出力データの作成
	Output_VS output = (Output_VS)0;

	// 座標の代入
	output.position_ = mul(input.position_, MATRIX_WVP);

	// 頂点色
	float3 inverse_light_vector = -DIFFUSE_LIGHT_VECTOR;
	float3 world_normal = normalize(mul(input.normal_, (float3x3)MATRIX_WIT));	// world座標系での法線

	// ランバート照明モデルの公式(拡散反射光＋環境光)
	// maxは光の当たらないところを黒にする為
	output.color_ = AMBIENT_LIGHT_INTENSITY * OBJECT_COLOR_AMBIENT +
					DIFFUSE_LIGHT_INTENSITY * OBJECT_COLOR_DIFFUSE * max(0, dot(world_normal, inverse_light_vector));

	output.color_.w = OBJECT_COLOR_DIFFUSE.w;

	return output;
}



//**********************************************************************
//
// ピクセルシェーダ定義
//
//**********************************************************************

//================================================================================
//
// [ メインピクセルシェーダ関数 ]
//
//================================================================================
/*
float4 mainPS(Output_VS input) : COLOR
{
	// tex2Dはテクスチャの読み込み
	// sampler_に登録されているテクスチャを、テクスチャ座標input.texcoord_0_で読み込んでいる
	return tex2D(sampler_, input.texcoord_0_);
}
*/


//**********************************************************************
//
// テクニック定義
//
//**********************************************************************

//================================================================================
//
// [ テクニック(レンダリング方法をまとめたもの) ]
//
//================================================================================

technique Techique01
{
	pass P0
	{
		VertexShader = compile vs_2_0 mainVS();
		//PixelShader  = compile ps_2_0 PS();
	}
}