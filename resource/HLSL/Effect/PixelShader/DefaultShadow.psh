//================================================================================
//!	@file	 DefaultShadow.psh
//!	@brief	 デフォルト影PixelShader
//! @details 
//!	@author  Kai Araki									@date 2019/02/19
//================================================================================



//****************************************
// グローバル変数
//****************************************
// テクスチャ
texture DIFFUSE_TEXTURE;
texture SHADOW_MAP_TEXTURE;



//****************************************
// サンプラ
//****************************************
sampler DIFFUSE_SAMPLER = sampler_state
{
    Texture = <DIFFUSE_TEXTURE>;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
    MipFilter = NONE;
    AddressU = Clamp;
    AddressV = Clamp;
};

sampler SHADOW_MAP_SAMPLER = sampler_state
{
    Texture = <SHADOW_MAP_TEXTURE>;
    MinFilter = POINT;//LINEAR;
    MagFilter = POINT;//LINEAR;
    MipFilter = POINT;//NONE;
    AddressU = Clamp;
    AddressV = Clamp;
};



//****************************************
// 構造体定義
//****************************************
//************************************************************														   
//! @brief   インプットStruct
//!
//! @details インプットのStruct
//************************************************************
struct Input
{
    float4 color_            : COLOR0;      //!< 色
    float2 ps_uv_            : TEXCOORD0;   //!< PS用UV
    float4 ps_shadow_map_uv_ : TEXCOORD1;   //!< PS用シャドウマップUV
};



//****************************************
// 関数定義
//****************************************
//--------------------------------------------------
//! @brief エントリー関数
//! @details
//! @param input  入力データ 
//! @param out_color 出力色
//! @retval void なし
//--------------------------------------------------
void MainPixelShader(Input input, out float4 out_color : COLOR0)
{
    // 影の縞模様を緩和するバイアス値
    const float BIAS = 0.005f;

    // 出力データ初期化
    out_color = (float4)0.0f;

    //　ライト目線によるZ値の再算出
    float z_value = input.ps_shadow_map_uv_.z / input.ps_shadow_map_uv_.w;

    // 射影空間のXY座標をテクスチャ座標に変換
    float2 texture_uv;
    texture_uv.x = (1.0f + input.ps_shadow_map_uv_.x / input.ps_shadow_map_uv_.w) * 0.5f;
    texture_uv.y = (1.0f + input.ps_shadow_map_uv_.y / input.ps_shadow_map_uv_.w) * 0.5f;

    // 実際のZ値抽出
    float actual_z_value = tex2D(SHADOW_MAP_SAMPLER, texture_uv).x;

    // 色算出(シャドウマップよりもZ値が大きければ影)
    out_color = input.color_ * tex2D(DIFFUSE_SAMPLER, input.ps_uv_);
    if (z_value > actual_z_value + BIAS)
    {
        out_color.rgb *= 0.5f;
    }
}