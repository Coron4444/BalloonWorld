//================================================================================
//!	@file	 BlinnPhong.psh
//!	@brief	 ブリン・フォンの鏡面反射PixelShader
//! @details 
//!	@author  Kai Araki									@date 2019/02/18
//================================================================================



//****************************************
// グローバル変数
//****************************************
// ディレクショナルライトベクトル(プログラム上で正規化済みが渡される)
float4 DIRECTIONAL_LIGHT_VECTOR = {1.0f, 0.0f, 0.0f, 1.0f};

// カメラ座標
float3 CAMERA_POSITION = {0.0f, 0.0f, 0.0f};

// ディヒューズテクスチャ
texture DIFFUSE_TEXTURE;



//****************************************
// サンプラ
//****************************************
sampler DIFFUSE_SAMPLER = sampler_state
{
    Texture = <DIFFUSE_TEXTURE>;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
    MipFilter = NONE;
    AddressU = Clamp;
    AddressV = Clamp;
};



//************************************************************														   
//! @brief   インプットStruct
//!
//! @details インプットのStruct
//************************************************************
struct Input
{
    float4 color_       : COLOR0;    //!< 色
    float3 ps_position_ : TEXCOORD0; //!< PS用座標
    float3 ps_normal_   : TEXCOORD1; //!< PS用法線
    float2 ps_uv_       : TEXCOORD2; //!< PS用UV
};



//****************************************
// 関数宣言
//****************************************



//--------------------------------------------------
//! @brief エントリー関数
//! @details
//! @param input     入力データ 
//! @param out_color 出力色
//! @retval void なし
//--------------------------------------------------
void MainPixelShader(Input input, out float4 out_color : COLOR0)
{
    // 鏡面反射指数
    const int spequlaer_exponent = 10;

    // 出力データ初期化
    out_color = (float4)0.0f;

    // 法線を正規化
    input.ps_normal_ = normalize(input.ps_normal_);

    // ディレクショナルライトベクトルを反転
    float3 inverse_light_vector = -DIRECTIONAL_LIGHT_VECTOR;

    // 逆視線ベクトルの作成
    float3 inverse_gaze_vector = normalize(CAMERA_POSITION - input.ps_position_);

    // ハーフベクトル作成
    float3 half_vector = normalize(inverse_light_vector + inverse_gaze_vector);

    // 色算出
    input.color_ = input.color_ * tex2D(DIFFUSE_SAMPLER, input.ps_uv_);
    out_color = input.color_ + pow(max(0, dot(input.ps_normal_, half_vector)), 
                                   spequlaer_exponent);
}