//================================================================================
//!	@file	 BitFlag.h
//!	@brief	 ビットフラグClass
//! @details 
//!	@author  Kai Araki									@date 2018/11/01
//================================================================================
#ifndef	_BIT_FLAG_H_
#define _BIT_FLAG_H_



//************************************************************														   
//! @brief   ビットフラグClass
//!
//! @details ビット単位のフラグClass
//************************************************************
class BitFlag
{
//====================
// 変数
//====================
public:
	unsigned flag_ = 0;			//!< フラグ


//====================
// プロパティ
//====================
public:
	//----------------------------------------
	//! @brief フラグ取得関数
	//! @details
	//! @param void なし
	//! @retval unsigned フラグ
	//----------------------------------------
	unsigned getFlag();

	//----------------------------------------
	//! @brief フラグ設定関数
	//! @details
	//! @param value フラグ
	//! @retval void なし
	//----------------------------------------
	void setFlag(unsigned value);


//====================
// 関数
//====================
public:
	//----------------------------------------
	//! @brief フラグリセット関数
	//! @details
	//! @param void なし
	//! @retval void なし
	//----------------------------------------
	void Reset();

	//----------------------------------------
	//! @brief フラグ解放関数
	//! @details
	//! @param flag フラグ
	//! @retval void なし
	//----------------------------------------
	void Release(unsigned flag);

	//----------------------------------------
	//! @brief 任意一致フラグ確認関数
	//! @details
	//! @param flag フラグ
	//! @retval bool どれか一つでもフラグが立っていればtrue
	//----------------------------------------
	bool CheckAny(unsigned flag);
	
	//----------------------------------------
	//! @brief 完全一致フラグ確認関数
	//! @details
	//! @param flag フラグ
	//! @retval bool 全てのフラグが立っていればtrue
	//----------------------------------------
	bool CheckAll(unsigned flag);
};



#endif