//================================================================================
//
//    サウンド処理ヘッダ
//    Author : Araki Kai                                作成日 : 2017/07/24
//
//================================================================================



//**********************************************************************
//
// インクルード文
//
//**********************************************************************

#include < XAudio2.h >

#include "Sound.h"



//**********************************************************************
//
// 構造体宣言
//
//**********************************************************************

// パラメータ
typedef struct
{
	char *pFilename;	// ファイル名
	int nCntLoop;		// ループカウント
} SOUNDPARAM;



//**********************************************************************
//
// プロトタイプ宣言
//
//**********************************************************************

//================================================================================
//
// [ チャンクのチェック ]
//
// ｢ 引数 ｣
//
// ･hFile              : ファイルハンドル
// ･format             : ファイルフォーマット
// ･pChunkSize         : チャンクサイズ
// ･pChunkDataPosition : チャンクデータの場所
//
// ｢ 戻り値 ｣
//
// ･HRESULT型 : エラーチェック用
//
//【 詳細 】
//
// ･チャンクデータをチェックする
//
//================================================================================

HRESULT CheckChunk(HANDLE hFile, DWORD format, DWORD *pChunkSize, DWORD *pChunkDataPosition);



//================================================================================
//
// [ チャンクの読み込み ]
//
// ｢ 引数 ｣
//
// ･hFile          : ファイルハンドル
// ･pBuffer        : 読み込み先バッファ
// ･dwBuffersize   : 読み込み先バッファのサイズ
// ･dwBufferoffset : 読み込み先バッファのオフセット
//
// ｢ 戻り値 ｣
//
// ･HRESULT型 : エラーチェック用
//
//【 詳細 】
//
// ･チャンクデータを読み込む
//
//================================================================================

HRESULT ReadChunkData(HANDLE hFile, void *pBuffer, DWORD dwBuffersize, DWORD dwBufferoffset);



//**********************************************************************
//
// グローバル変数
//
//**********************************************************************

IXAudio2 *g_pXAudio2 = NULL;								// XAudio2オブジェクトへのインターフェイス
IXAudio2MasteringVoice *g_pMasteringVoice = NULL;			// マスターボイス
IXAudio2SourceVoice *g_apSourceVoice[SOUND_LABEL_MAX] = {};	// ソースボイス
BYTE *g_apDataAudio[SOUND_LABEL_MAX] = {};					// オーディオデータ
DWORD g_aSizeAudio[SOUND_LABEL_MAX] = {};					// オーディオデータサイズ

// 各音素材のパラメータ
SOUNDPARAM g_aParam[SOUND_LABEL_MAX] =
{
	{"resource/Music/BGM/Title.wav",  -1},
	{"resource/Music/BGM/Stage1.wav", -1},	
	{"resource/Music/BGM/Stage2.wav", -1},	
	{"resource/Music/BGM/Stage3.wav", -1},
	{"resource/Music/BGM/Clear.wav",  -1},


	{"resource/music/SE/ketei.wav",           0 },
	{"resource/music/SE/cursor.wav",           0 },
	{"resource/music/SE/open.wav",           0 },
	{"resource/music/SE/toziru.wav",           0 },
	{"resource/music/SE/tobira_on.wav",           0 },
	{"resource/music/SE/jump.wav",           0 },
	{"resource/music/SE/damage.wav",           0 },
	{"resource/music/SE/deth.wav",           0 },
	{"resource/music/SE/charge.wav",           0 },
	{"resource/music/SE/Shot.wav",           0 },
	{"resource/music/SE/kotei.wav",           0 },
	{"resource/music/SE/Release.wav",           0 },
	{"resource/music/SE/Clear.wav",           0 },
	{"resource/music/SE/Switch.wav",           0 },
	{"resource/music/SE/break.wav",           0 },
	{"resource/music/SE/Recovery.wav",           0 },
	{"resource/music/SE/hansya.wav",           0 },
	{"resource/music/SE/CheckPoint.wav",           0 },
	{"resource/music/SE/Dog_damage.wav",           0 },
	{"resource/music/SE/Dog_yarare.wav",           0 },
	{"resource/music/SE/Monkey_damage.wav",           0 },
	{"resource/music/SE/Monkey_nage.wav",           0 },
	{"resource/music/SE/Monkey_yarare.wav",           0 },
};



//================================================================================
//
// [ サウンド初期化関数 ]
//
// ｢ 引数 ｣
//
// ･hWnd : ウィンドウハンドル
//
// ｢ 戻り値 ｣
//
// ･HRESULT型 : エラーチェック用
//
//【 詳細 】
//
// ･サウンドを使用するための初期化
//
//================================================================================

HRESULT InitSound(HWND hWnd)
{
	HRESULT hr;

	// COMライブラリの初期化
	CoInitializeEx(NULL, COINIT_MULTITHREADED);

	// XAudio2オブジェクトの作成
	hr = XAudio2Create(&g_pXAudio2, 0);
	if(FAILED(hr))
	{
		MessageBox(hWnd, "XAudio2オブジェクトの作成に失敗！", "警告！", MB_ICONWARNING);

		// COMライブラリの終了処理
		CoUninitialize();

		return E_FAIL;
	}
	
	// マスターボイスの生成
	hr = g_pXAudio2->CreateMasteringVoice(&g_pMasteringVoice);
	if(FAILED(hr))
	{
		MessageBox(hWnd, "マスターボイスの生成に失敗！", "警告！", MB_ICONWARNING);

		if(g_pXAudio2)
		{
			// XAudio2オブジェクトの開放
			g_pXAudio2->Release();
			g_pXAudio2 = NULL;
		}

		// COMライブラリの終了処理
		CoUninitialize();

		return E_FAIL;
	}

	// サウンドデータの初期化
	for(int nCntSound = 0; nCntSound < SOUND_LABEL_MAX; nCntSound++)
	{
		HANDLE hFile;
		DWORD dwChunkSize = 0;
		DWORD dwChunkPosition = 0;
		DWORD dwFiletype;
		WAVEFORMATEXTENSIBLE wfx;
		XAUDIO2_BUFFER buffer;

		// バッファのクリア
		memset(&wfx, 0, sizeof(WAVEFORMATEXTENSIBLE));
		memset(&buffer, 0, sizeof(XAUDIO2_BUFFER));

		// サウンドデータファイルの生成
		hFile = CreateFile(g_aParam[nCntSound].pFilename, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, NULL);
		if(hFile == INVALID_HANDLE_VALUE)
		{
			MessageBox(hWnd, "サウンドデータファイルの生成に失敗！(1)", "警告！", MB_ICONWARNING);
			return HRESULT_FROM_WIN32(GetLastError());
		}
		if(SetFilePointer(hFile, 0, NULL, FILE_BEGIN) == INVALID_SET_FILE_POINTER)
		{// ファイルポインタを先頭に移動
			MessageBox(hWnd, "サウンドデータファイルの生成に失敗！(2)", "警告！", MB_ICONWARNING);
			return HRESULT_FROM_WIN32(GetLastError());
		}
	
		// WAVEファイルのチェック
		hr = CheckChunk(hFile, 'FFIR', &dwChunkSize, &dwChunkPosition);
		if(FAILED(hr))
		{
			MessageBox(hWnd, "WAVEファイルのチェックに失敗！(1)", "警告！", MB_ICONWARNING);
			return S_FALSE;
		}
		hr = ReadChunkData(hFile, &dwFiletype, sizeof(DWORD), dwChunkPosition);
		if(FAILED(hr))
		{
			MessageBox(hWnd, "WAVEファイルのチェックに失敗！(2)", "警告！", MB_ICONWARNING);
			return S_FALSE;
		}
		if(dwFiletype != 'EVAW')
		{
			MessageBox(hWnd, "WAVEファイルのチェックに失敗！(3)", "警告！", MB_ICONWARNING);
			return S_FALSE;
		}
	
		// フォーマットチェック
		hr = CheckChunk(hFile, ' tmf', &dwChunkSize, &dwChunkPosition);
		if(FAILED(hr))
		{
			MessageBox(hWnd, "フォーマットチェックに失敗！(1)", "警告！", MB_ICONWARNING);
			return S_FALSE;
		}
		hr = ReadChunkData(hFile, &wfx, dwChunkSize, dwChunkPosition);
		if(FAILED(hr))
		{
			MessageBox(hWnd, "フォーマットチェックに失敗！(2)", "警告！", MB_ICONWARNING);
			return S_FALSE;
		}

		// オーディオデータ読み込み
		hr = CheckChunk(hFile, 'atad', &g_aSizeAudio[nCntSound], &dwChunkPosition);
		if(FAILED(hr))
		{
			MessageBox(hWnd, "オーディオデータ読み込みに失敗！(1)", "警告！", MB_ICONWARNING);
			return S_FALSE;
		}
		g_apDataAudio[nCntSound] = (BYTE*)malloc(g_aSizeAudio[nCntSound]);
		hr = ReadChunkData(hFile, g_apDataAudio[nCntSound], g_aSizeAudio[nCntSound], dwChunkPosition);
		if(FAILED(hr))
		{
			MessageBox(hWnd, "オーディオデータ読み込みに失敗！(2)", "警告！", MB_ICONWARNING);
			return S_FALSE;
		}
	
		// ソースボイスの生成
		hr = g_pXAudio2->CreateSourceVoice(&g_apSourceVoice[nCntSound], &(wfx.Format));
		if(FAILED(hr))
		{
			MessageBox(hWnd, "ソースボイスの生成に失敗！", "警告！", MB_ICONWARNING);
			return S_FALSE;
		}

		// バッファの値設定
		memset(&buffer, 0, sizeof(XAUDIO2_BUFFER));
		buffer.AudioBytes = g_aSizeAudio[nCntSound];
		buffer.pAudioData = g_apDataAudio[nCntSound];
		buffer.Flags      = XAUDIO2_END_OF_STREAM;
		buffer.LoopCount  = g_aParam[nCntSound].nCntLoop;

		// オーディオバッファの登録
		g_apSourceVoice[nCntSound]->SubmitSourceBuffer(&buffer);
	}

	return S_OK;
}



//================================================================================
//
// [ サウンド終了処理関数 ]
//
// ｢ 引数 ｣
//
// ･なし
//
// ｢ 戻り値 ｣
//
// ･なし
//
//【 詳細 】
//
// ･サウンドの使用を終了するときの処理
//
//================================================================================

void UninitSound(void)
{
	// 一時停止
	for(int nCntSound = 0; nCntSound < SOUND_LABEL_MAX; nCntSound++)
	{
		if(g_apSourceVoice[nCntSound])
		{
			// 一時停止
			g_apSourceVoice[nCntSound]->Stop(0);
	
			// ソースボイスの破棄
			g_apSourceVoice[nCntSound]->DestroyVoice();
			g_apSourceVoice[nCntSound] = NULL;
	
			// オーディオデータの開放
			free(g_apDataAudio[nCntSound]);
			g_apDataAudio[nCntSound] = NULL;
		}
	}
	
	// マスターボイスの破棄
	g_pMasteringVoice->DestroyVoice();
	g_pMasteringVoice = NULL;
	
	if(g_pXAudio2)
	{
		// XAudio2オブジェクトの開放
		g_pXAudio2->Release();
		g_pXAudio2 = NULL;
	}
	
	// COMライブラリの終了処理
	CoUninitialize();
}



//================================================================================
//
// [ セグメント再生or停止関数 ]
//
// ｢ 引数 ｣
//
// ･label : ヘッダで定義されたサウンドファイルの番号
//
// ｢ 戻り値 ｣
//
// ･HRESULT型 : エラーチェック用
//
//【 詳細 】
//
// ･セグメントの再生をする
// ･再生中の場合は停止する
//
//================================================================================

HRESULT PlaySound(SOUND_LABEL label)
{
	XAUDIO2_VOICE_STATE xa2state;
	XAUDIO2_BUFFER buffer;

	// バッファの値設定
	memset(&buffer, 0, sizeof(XAUDIO2_BUFFER));
	buffer.AudioBytes = g_aSizeAudio[label];
	buffer.pAudioData = g_apDataAudio[label];
	buffer.Flags      = XAUDIO2_END_OF_STREAM;
	buffer.LoopCount  = g_aParam[label].nCntLoop;

	// 状態取得
	g_apSourceVoice[label]->GetState(&xa2state);
	if(xa2state.BuffersQueued != 0)
	{// 再生中
		// 一時停止
		g_apSourceVoice[label]->Stop(0);

		// オーディオバッファの削除
		g_apSourceVoice[label]->FlushSourceBuffers();
	}

	// オーディオバッファの登録
	g_apSourceVoice[label]->SubmitSourceBuffer(&buffer);

	// 再生
	g_apSourceVoice[label]->Start(0);

	return S_OK;
}



//================================================================================
//
// [ セグメント停止関数( 個別指定 ) ]
//
// ｢ 引数 ｣
//
// ･label : ヘッダで定義されたサウンドファイルの番号
//
// ｢ 戻り値 ｣
//
// ･なし
//
//【 詳細 】
//
// ･セグメントを個別に停止する
//
//================================================================================

void StopSound(SOUND_LABEL label)
{
	XAUDIO2_VOICE_STATE xa2state;

	// 状態取得
	g_apSourceVoice[label]->GetState(&xa2state);
	if(xa2state.BuffersQueued != 0)
	{// 再生中
		// 一時停止
		g_apSourceVoice[label]->Stop(0);

		// オーディオバッファの削除
		g_apSourceVoice[label]->FlushSourceBuffers();
	}
}



//================================================================================
//
// [ セグメント停止関数( 全て ) ]
//
// ｢ 引数 ｣
//
// ･なし
//
// ｢ 戻り値 ｣
//
// ･なし
//
//【 詳細 】
//
// ･全てのセグメントを停止する
//
//================================================================================

void StopSound(void)
{
	// 一時停止
	for(int nCntSound = 0; nCntSound < SOUND_LABEL_MAX; nCntSound++)
	{
		if(g_apSourceVoice[nCntSound])
		{
			// 一時停止
			g_apSourceVoice[nCntSound]->Stop(0);
		}
	}
}



//================================================================================
//
// [ チャンクのチェック ]
//
// ｢ 引数 ｣
//
// ･hFile              : ファイルハンドル
// ･format             : ファイルフォーマット
// ･pChunkSize         : チャンクサイズ
// ･pChunkDataPosition : チャンクデータの場所
//
// ｢ 戻り値 ｣
//
// ･HRESULT型 : エラーチェック用
//
//【 詳細 】
//
// ･チャンクデータをチェックする
//
//================================================================================

HRESULT CheckChunk(HANDLE hFile, DWORD format, DWORD *pChunkSize, DWORD *pChunkDataPosition)
{
	HRESULT hr = S_OK;
	DWORD dwRead;
	DWORD dwChunkType;
	DWORD dwChunkDataSize;
	DWORD dwRIFFDataSize = 0;
	DWORD dwFileType;
	DWORD dwBytesRead = 0;
	DWORD dwOffset = 0;
	
	if(SetFilePointer(hFile, 0, NULL, FILE_BEGIN) == INVALID_SET_FILE_POINTER)
	{// ファイルポインタを先頭に移動
		return HRESULT_FROM_WIN32(GetLastError());
	}
	
	while(hr == S_OK)
	{
		if(ReadFile(hFile, &dwChunkType, sizeof(DWORD), &dwRead, NULL) == 0)
		{// チャンクの読み込み
			hr = HRESULT_FROM_WIN32(GetLastError());
		}

		if(ReadFile(hFile, &dwChunkDataSize, sizeof(DWORD), &dwRead, NULL) == 0)
		{// チャンクデータの読み込み
			hr = HRESULT_FROM_WIN32(GetLastError());
		}

		switch(dwChunkType)
		{
		case 'FFIR':
			dwRIFFDataSize  = dwChunkDataSize;
			dwChunkDataSize = 4;
			if(ReadFile(hFile, &dwFileType, sizeof(DWORD), &dwRead, NULL) == 0)
			{// ファイルタイプの読み込み
				hr = HRESULT_FROM_WIN32(GetLastError());
			}
			break;

		default:
			if(SetFilePointer(hFile, dwChunkDataSize, NULL, FILE_CURRENT) == INVALID_SET_FILE_POINTER)
			{// ファイルポインタをチャンクデータ分移動
				return HRESULT_FROM_WIN32(GetLastError());
			}
		}

		dwOffset += sizeof(DWORD) * 2;
		if(dwChunkType == format)
		{
			*pChunkSize         = dwChunkDataSize;
			*pChunkDataPosition = dwOffset;

			return S_OK;
		}

		dwOffset += dwChunkDataSize;
		if(dwBytesRead >= dwRIFFDataSize)
		{
			return S_FALSE;
		}
	}
	
	return S_OK;
}



//================================================================================
//
// [ チャンクの読み込み ]
//
// ｢ 引数 ｣
//
// ･hFile          : ファイルハンドル
// ･pBuffer        : 読み込み先バッファ
// ･dwBuffersize   : 読み込み先バッファのサイズ
// ･dwBufferoffset : 読み込み先バッファのオフセット
//
// ｢ 戻り値 ｣
//
// ･HRESULT型 : エラーチェック用
//
//【 詳細 】
//
// ･チャンクデータを読み込む
//
//================================================================================

HRESULT ReadChunkData(HANDLE hFile, void *pBuffer, DWORD dwBuffersize, DWORD dwBufferoffset)
{
	DWORD dwRead;
	
	if(SetFilePointer(hFile, dwBufferoffset, NULL, FILE_BEGIN) == INVALID_SET_FILE_POINTER)
	{// ファイルポインタを指定位置まで移動
		return HRESULT_FROM_WIN32(GetLastError());
	}

	if(ReadFile(hFile, pBuffer, dwBuffersize, &dwRead, NULL) == 0)
	{// データの読み込み
		return HRESULT_FROM_WIN32(GetLastError());
	}
	
	return S_OK;
}

