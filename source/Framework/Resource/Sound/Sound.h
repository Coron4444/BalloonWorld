//================================================================================
//
//    サウンド処理ヘッダ
//    Author : Araki Kai                                作成日 : 2017/07/24
//
//================================================================================

#ifndef _SOUND_H_
#define _SOUND_H_



//**********************************************************************
//
// インクルード文
//
//**********************************************************************

#include <Windows.h>



//**********************************************************************
//
// 列挙型宣言
//
//**********************************************************************

// サウンドファイル
enum SOUND_LABEL
{
	// BGM
	SOUND_LABEL_BGM_TITLE,
	SOUND_LABEL_BGM_STAGE_1,
	SOUND_LABEL_BGM_STAGE_2,
	SOUND_LABEL_BGM_STAGE_3,
	SOUND_LABEL_BGM_CLEAR,

	// SE
	SOUND_LABEL_SE_KETEI,
	SOUND_LABEL_SE_CURSOR,
	SOUND_LABEL_SE_OPEN,
	SOUND_LABEL_SE_CLOSE,
	SOUND_LABEL_SE_TOBIRA_ON,
	SOUND_LABEL_SE_JUMP,
	SOUND_LABEL_SE_DAMAGE,
	SOUND_LABEL_SE_DETH,
	SOUND_LABEL_SE_CHARGE,
	SOUND_LABEL_SE_SHOT,
	SOUND_LABEL_SE_KOTEI,
	SOUND_LABEL_SE_RELEASE,
	SOUND_LABEL_SE_CLEAR,
	SOUND_LABEL_SE_SWITCH,
	SOUND_LABEL_SE_BREAK,
	SOUND_LABEL_SE_RECOVERY,
	SOUND_LABEL_SE_HANSYA,
	SOUND_LABEL_SE_CHECK_POINT,
	SOUND_LABEL_SE_DOG_DAMAGE,
	SOUND_LABEL_SE_DOG_YARARE,
	SOUND_LABEL_SE_MONKEY_DAMAGE,
	SOUND_LABEL_SE_MONKEY_NAGE,
	SOUND_LABEL_SE_MONKEY_YARARE,

	SOUND_LABEL_MAX,
};



//**********************************************************************
//
// プロトタイプ宣言
//
//**********************************************************************

//================================================================================
//
// [ サウンド初期化関数 ]
//
// ｢ 引数 ｣
//
// ･hWnd : ウィンドウハンドル
//
// ｢ 戻り値 ｣
//
// ･HRESULT型 : エラーチェック用
//
//【 詳細 】
//
// ･サウンドを使用するための初期化
//
//================================================================================

HRESULT InitSound(HWND hWnd);



//================================================================================
//
// [ サウンド終了処理関数 ]
//
// ｢ 引数 ｣
//
// ･なし
//
// ｢ 戻り値 ｣
//
// ･なし
//
//【 詳細 】
//
// ･サウンドの使用を終了するときの処理
//
//================================================================================

void UninitSound(void);



//================================================================================
//
// [ セグメント再生or停止関数 ]
//
// ｢ 引数 ｣
//
// ･label : ヘッダで定義されたサウンドファイルの番号
//
// ｢ 戻り値 ｣
//
// ･HRESULT型 : エラーチェック用
//
//【 詳細 】
//
// ･セグメントの再生をする
// ･再生中の場合は停止する
//
//================================================================================

HRESULT PlaySound(SOUND_LABEL label);



//================================================================================
//
// [ セグメント停止関数( 個別指定 ) ]
//
// ｢ 引数 ｣
//
// ･label : ヘッダで定義されたサウンドファイルの番号
//
// ｢ 戻り値 ｣
//
// ･なし
//
//【 詳細 】
//
// ･セグメントを個別に停止する
//
//================================================================================

void StopSound(SOUND_LABEL label);



//================================================================================
//
// [ セグメント停止関数( 全て ) ]
//
// ｢ 引数 ｣
//
// ･なし
//
// ｢ 戻り値 ｣
//
// ･なし
//
//【 詳細 】
//
// ･全てのセグメントを停止する
//
//================================================================================

void StopSound(void);



#endif
