//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//    数字クラス
//    Author : Araki Kai                                作成日 : 2018/06/19
//
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



//======================================================================
//
// インクルード文
//
//======================================================================

#include "Number.h"

#include <Polygon\PlanePolygon\PlanePolygon.h>
#include <Texture/TextureManager/TextureManager.h>



//======================================================================
//
// 定数定義
//
//======================================================================

const std::string Number::TEXTURE_NAME = "UI/Num.png";



//======================================================================
//
// 非静的メンバ関数定義
//
//======================================================================

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
// [ 初期化関数 ]
//
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

void Number::Init(DrawBase* draw)
{
	// プレーンポリゴンの作成
	plane_polygon_ = new PlanePolygon;

	// テクスチャの登録
	diffuse_texture_ = TextureManager::getpInstance()->getpObject(&TEXTURE_NAME, nullptr);
	diffuse_texture_->setDivisionNum(10, 10, 1);

	// 基底クラスの初期化
	GameObjectBase::Init(nullptr, draw, nullptr);

	// 初期数字セット
	number_ = -1;		// 初期の数字変更用
	SetNumber(0);
}



//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
// [ 終了処理関数 ]
//
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

void Number::Uninit()
{
	// 基底クラスの終了処理
	GameObjectBase::Uninit();

	// プレーンポリゴンの解放
	SafeRelease::Normal(&plane_polygon_);

	SafeRelease::PlusRelease(&diffuse_texture_);
}



//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
// [ Reset処理関数 ]
//
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

void Number::Reset()
{

}



//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
// [ 数字設定関数 ]
//
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

void Number::SetNumber(int number)
{
	if (number < 0 || number > 9) return;
	if (number_ == number)        return;

	// 数字の変更とUV値の変更
	number_ = number;
	plane_polygon_->SetUV(diffuse_texture_, number_);
}



//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
// [ 色設定関数 ]
//
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

void Number::SetColor(XColor4 color)
{
	plane_polygon_->SetColor(color);
}