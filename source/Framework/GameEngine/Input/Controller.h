//================================================================================
//
//    コントローラーヘッダ
//    Author : Araki Kai                                作成日 : 2017/09/24
//
//================================================================================

#ifndef	_CONTROLLER_H_
#define _CONTROLLER_H_



//**********************************************************************
//
// インクルード文
//
//**********************************************************************

#include <Windows.h>
#include <XInput.h>



//**********************************************************************
//
// マクロ定義
//
//**********************************************************************

// 一台でも繋がっているときの返り値
const unsigned CONNECT_ONE = 1;

// デバイスの種類( コントローラー, キーボード )
const unsigned DEVICE_NUM = 2;



//**********************************************************************
//
// 列挙型宣言
//
//**********************************************************************

enum
{
	CONTOROLLER_NUM_NONE = -1,
	CONTOROLLER_NUM_1,
	CONTOROLLER_NUM_2,
	CONTOROLLER_NUM_3,
	CONTOROLLER_NUM_4,
	CONTOROLLER_NUM_MAX
};


enum
{
	STICK_NUM_NONE = -1,
	STICK_UP,
	STICK_DOWN,
	STICK_LEFT,
	STICK_RIGHT,
	STICK_NUM_MAX
};



enum
{
	TRIGGER_BUTTON_NUM_NONE = -1,
	TRIGGER_BUTTON_R2,
	TRIGGER_BUTTON_L2,
	TRIGGER_BUTTON_NUM_MAX
};



//**********************************************************************
//
// クラス宣言
//
//**********************************************************************

class XInputController
{
public : 
	XINPUT_STATE state;
	XINPUT_STATE oldState;

	DWORD        connectionMessage;
};






//**********************************************************************
//
// プロトタイプ宣言
//
//**********************************************************************

//================================================================================
//
// [ コントローラーの値設定関数 ]
//
// ｢ 引数 ｣
//
// ･なし
//
// ｢ 戻り値 ｣
//
// ･なし
//
//【 詳細 】
//
// ･コントローラーの値を設定する
//
//================================================================================

void SetController();



//================================================================================
//
// [ コントローラーのボタン判定関数( HOLD ) ]
//
// ｢ 引数 ｣
//
// ･controllerNum : コントローラー番号
// ･buttonNum     : 判定したいボタン
//
// ｢ 戻り値 ｣
//
// ･bool型 : 押しっぱなしかどうかを返す
//
//【 詳細 】
//
// ･引数で渡されたコントローラーのボタンがHOLD状態かを判定する
//
//================================================================================

bool InputHoldController( int controllerNum, int buttonNum );



//================================================================================
//
// [ コントローラーのボタン判定関数( TRIG ) ]
//
// ｢ 引数 ｣
//
// ･controllerNum : コントローラー番号
// ･buttonNum     : 判定したいボタン
//
// ｢ 戻り値 ｣
//
// ･bool型 : 押しっぱなしかどうかを返す
//
//【 詳細 】
//
// ･引数で渡されたコントローラーのボタンがTRIG状態かを判定する
//
//================================================================================

bool InputTriggerController( int controllerNum, int buttonNum );



//================================================================================
//
// [ コントローラーのボタン判定関数( RELEASE ) ]
//
// ｢ 引数 ｣
//
// ･controllerNum : コントローラー番号
// ･buttonNum     : 判定したいボタン
//
// ｢ 戻り値 ｣
//
// ･bool型 : 押しっぱなしかどうかを返す
//
//【 詳細 】
//
// ･引数で渡されたコントローラーのボタンがRELEASE状態かを判定する
//
//================================================================================

bool InputReleaseController( int controllerNum, int buttonNum );



//================================================================================
//
// [ コントローラーのLスティック判定関数(TRIG) ]
//
// ｢ 引数 ｣
//
// ･controllerNum : コントローラー番号
//
// ｢ 戻り値 ｣
//
// ･bool型 : ある一定数を超えたら反応する
//
//【 詳細 】
//
// ･引数で渡されたコントローラーのLスティックのTRIGかを判定する
//
//================================================================================

bool InputLStickTriggerController( int controllerNum, int direction );



//================================================================================
//
// [ コントローラーのLスティック判定関数(HOLD) ]
//
//================================================================================

bool InputLStickHoldController( int controllerNum, int direction );



//================================================================================
//
// [コントローラーのR2L2判定関数(TRIG)]
//
//================================================================================

bool InputR2L2TriggerController(int controllerNum, int direction);



//================================================================================
//
// [コントローラーのR2L2判定関数(HOLD)]
//
//================================================================================

bool InputR2L2HoldController(int controllerNum, int direction);



//================================================================================
//
// [コントローラーのR2L2判定関数(RELEASE)]
//
//================================================================================

bool InputR2L2ReleaseController(int controllerNum, int direction);



//================================================================================
//
// [ コントローラーが繋がっているかの判定関数 ]
//
// ｢ 引数 ｣
//
// ･controllerNum : コントローラー番号
//
// ｢ 戻り値 ｣
//
// ･bool型 : 接続されていればtrueを返す
//
//【 詳細 】
//
// ･接続されていればtrueを返す
//
//================================================================================

bool CheckController( int controllerNum );



//================================================================================
//
// [ 接続されているコントローラー数の取得関数 ]
//
// ｢ 引数 ｣
//
// ･なし
//
// ｢ 戻り値 ｣
//
// ･int型 : 接続されているコントローラーの数を返す
//
//【 詳細 】
//
// ･接続されているコントローラー数を返す
//
//================================================================================

int GetControllerNum();



//================================================================================
//
// [ 1台でもコントローラーが接続されているかフラグ関数 ]
//
// ｢ 引数 ｣
//
// ･なし
//
// ｢ 戻り値 ｣
//
// ･int型 : 1台でもコントローラーが接続されていると1を返す
//
//【 詳細 】
//
// ･1台でもコントローラーが接続されていると1を返す
//
//================================================================================

int GetControllerConnect();



#endif